package com.bank.service;

import java.util.ArrayList;

import com.bank.dao.*;
import com.bank.exceptions.InvalidSSNException;
import com.bank.exceptions.NoEmailException;
import com.bank.pojos.Account;
import com.bank.pojos.Account.accountType;
import com.bank.pojos.Person;
import com.bank.pojos.User;

// FIXME always check if user has been deleted

public class Service {

	DAO daoImpl = new DaoTextImpl();

	public Account validateUser(String username, String password) {

		User guy = daoImpl.readUser(username);

		if (guy == null)
			return null;

		if (guy.getAccount().isDeleted()) {
			System.out.println("This account has been deleted.");
			return null;
		}

		if (guy.getAccount().getPassword().equals(password))
			return guy.getAccount();
		else return null;
	}

	public boolean isEmailAvailable(String email) {

		ArrayList<Person> peopleList = daoImpl.getAllPersons();

		for (Person guy : peopleList)
			if (guy.getEmail().equals(email)) {
				System.out.println("Email unavailable");
				return false;
			}

		return true;
	}

	private boolean isUsernameAvailable(String username) {

		ArrayList<Person> peopleList = daoImpl.getAllPersons();

		for (Person guy : peopleList) {
			User myUser = (User)guy;
			if (myUser.getAccount().getUsername().equals(username))
				return false;
		}

		return true;

	}

	// Attempts to create a person unless a person already exists with
	// the given SSN. Returns the person object either way
	// An email must be supplied but it can be an empty string where it will not
	// be checked for uniqueness
	public Person tryCreatePerson(String SSN, String firstName, String lastName, String email) {

		Person per = daoImpl.readPerson(SSN);

		// If person does not exist yet
		if (per == null) {
			Person guy;
			try {

				guy = new Person(SSN, firstName, lastName);
				
				if (!(email.equals(""))) {
					isEmailAvailable(email);
				}
				
				daoImpl.createPerson(guy);
				return guy;	

			} catch (InvalidSSNException e) {
				e.printStackTrace();
				return null;
			}
		}

		return per;

	}

	public boolean createUser(Person guy, String username, String password, accountType type) {

		// Check that username is unique
		if (!isUsernameAvailable(username)) {
			System.out.println("That username is already taken.");
			return false;
		}

		// Create an account and associated user
		try {
			Account acc = new Account(guy, username, password, type);
			User myUser = new User(guy, acc);

			daoImpl.createPerson((Person)myUser);
		} catch (InvalidSSNException e) {
			e.printStackTrace();
			return false;
		} catch (NoEmailException e) {
			e.printStackTrace();
			return false;
		}

		return true;
	}
	
	public boolean updatePerson(Person per) {
		
		daoImpl.updatePerson(per);
		
	}

}
