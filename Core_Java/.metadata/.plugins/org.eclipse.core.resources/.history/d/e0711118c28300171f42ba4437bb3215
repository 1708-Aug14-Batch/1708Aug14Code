package com.bank.dao;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;

import com.bank.pojos.Clerk;
import com.bank.pojos.Person;
import com.bank.pojos.User;

// FIXME ensure that users/people/clerks can be created even if the text files are empty

public class DaoTextImpl implements DAO {
	
	private static String personFilename = "src/com/bank/files/persons.txt";
	private static String userFilename = "src/com/bank/files/users.txt";
	private static String clerkFilename = "src/com/bank/files/clerks.txt";
	
//------------------------------------------------------------------------------
// Persons 
//------------------------------------------------------------------------------
	
	@Override
	public boolean createPerson(Person per) {
		
		try(BufferedWriter bw = new BufferedWriter(
				new FileWriter(personFilename, true))) {

			bw.write(per.toString() + "\n");
			return true;

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return false;
	}
	
	@Override
	public Person readPerson(String SSN) {
		
		// try-with-resources block
		try(BufferedReader br = new BufferedReader(
				new FileReader(personFilename))) {

			String line = null;
			while((line = br.readLine()) != null) {
				
				Person per = Person.fromString(line);
				
				if (per.getSSN().equals(SSN))
					return per;
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	@Override
	public boolean updatePerson(Person person) {
		boolean updated = false;
		
		ArrayList<Person> personList = new ArrayList<Person>();
		
		try(BufferedWriter bw = new BufferedWriter(
				new FileWriter(personFilename, true))) {

			for (Person per : personList) {
				if (per.getSSN().equals(person.getSSN())) {
					updated = true;
					bw.write(person.toString() + "\n");
				} else bw.write(per.toString() + "\n");
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return updated
	}
	
	// deletePerson intentionally omitted
	
	@Override
	public ArrayList<Person> getAllPersons() {
		ArrayList<Person> personList = new ArrayList<Person>();
		
		// try-with-resources block
		try(BufferedReader br = new BufferedReader(
				new FileReader(personFilename))) {

			String line = null;
			while((line = br.readLine()) != null) {
				
				Person per = Person.fromString(line);
				
				personList.add(per);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return personList;
	}
	
//------------------------------------------------------------------------------
// Users
//------------------------------------------------------------------------------
	
	@Override
	public User readUser(String username) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean createUser(User guy) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean updateUser(User guy) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean deleteUser(String username) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public ArrayList<User> getAllUsers() {
		// TODO Auto-generated method stub
		return null;
	}
	
//------------------------------------------------------------------------------
// Clerks
//------------------------------------------------------------------------------

	@Override
	public boolean createClerk(Clerk cler) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public User readClerk(int employeeId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean updateClerk(Clerk cler) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean deleteClerk(int employeeId) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public ArrayList<Clerk> getAllClerks() {
		// TODO Auto-generated method stub
		return null;
	}	
	
	
}
