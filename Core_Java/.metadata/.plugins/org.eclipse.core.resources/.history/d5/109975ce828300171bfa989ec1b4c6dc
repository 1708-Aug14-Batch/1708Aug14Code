package com.bank.dao;

import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;

import com.bank.pojos.Clerk;
import com.bank.pojos.Person;
import com.bank.pojos.User;

// FIXME ensure that users/people/clerks can be created even if the text files are empty

public class DaoTextImpl implements DAO {
	
	private static String personFilename = "src/com/bank/files/persons.txt";
	private static String userFilename = "src/com/bank/files/users.txt";
	private static String clerkFilename = "src/com/bank/files/clerks.txt";
	
	@Override
	public void createPerson(Person per) {
		
		String filename = setFilename(per);
		
		try(BufferedWriter bw = new BufferedWriter(
				new FileWriter(filename, true))) {

			bw.write(per.toString());
			// FIXME String person.toString() and static Person Person.fromString();
			//		also for user and clerk

		}
		
	}
	
	@Override
	public Person readPerson(String SSN) {
		Person per = null;
		String filename = personFilename;
		
		// try-with-resources block
		try(ObjectInputStream ois = new ObjectInputStream(
				new FileInputStream(filename))) {

			per = (Person)ois.readObject();

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}

		return per;
	}
	
	@Override
	public User readUser(String username) {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public boolean updatePerson(Person person) {
		// TODO Auto-generated method stub
		return false;
	}
	
	@Override
	public ArrayList<Person> getAllPersons() {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public boolean deleteUser(User guy) {
		// TODO Auto-generated method stub
		return false;
	}
	
	private static String setFilename(Person p) {
		if (p.getClass() == User.class)
			return userFilename;
		else if (p.getClass() == Clerk.class)
			return clerkFilename;
		else return personFilename;
	}
	
}
