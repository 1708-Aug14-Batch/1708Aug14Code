
DROP TABLE USERS;
DROP TABLE REQUESTS;
DROP TABLE STATUS;

CREATE TABLE USERS (
  USERID NUMBER PRIMARY KEY,
  EMAIL VARCHAR2(50) UNIQUE NOT NULL,
  PASSWORD VARCHAR2(50) NOT NULL,
  FIRSTNAME VARCHAR2(30) NOT NULL,
  LASTNAME VARCHAR2(30) NOT NULL,
  ISMANAGER NUMBER(1,0) NOT NULL
);

CREATE TABLE STATUS (
  STATUSID NUMBER PRIMARY KEY,
  NAME VARCHAR(30) UNIQUE NOT NULL
);

CREATE TABLE REQUESTS (
  REQUESTID NUMBER PRIMARY KEY,
  SUBMITTERID NUMBER NOT NULL,
  SUBMITDATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  RESOLVERID NUMBER,
  RESOLVEDATE TIMESTAMP,
  STATUS NUMBER DEFAULT 1 NOT NULL,
  DESCRIPTION VARCHAR2(240),
  NOTES VARCHAR2(240),
  AMOUNT NUMBER(14, 2) NOT NULL, CHECK (AMOUNT >= 0),
  
  CONSTRAINT FK_SUBMITTERID FOREIGN KEY (SUBMITTERID)
  REFERENCES USERS(USERID) ON DELETE CASCADE,
  CONSTRAINT FK_RESOLVERID  FOREIGN KEY (RESOLVERID)
  REFERENCES USERS(USERID) ON DELETE CASCADE,
  CONSTRAINT FK_STATUS      FOREIGN KEY (STATUS)
  REFERENCES STATUS(STATUSID)
);
/

CREATE SEQUENCE USERID_SEQ START WITH 1 INCREMENT BY 1 NOMAXVALUE;
CREATE SEQUENCE REQUESTID_SEQ START WITH 1 INCREMENT BY 1 NOMAXVALUE;
/

CREATE OR REPLACE TRIGGER USERID_TRIG
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
  IF :NEW.USERID IS NULL THEN
    SELECT USERID_SEQ.NEXTVAL INTO :NEW.USERID FROM DUAL;
  END IF;
END;
/

CREATE OR REPLACE TRIGGER REQUESTID_TRIG
BEFORE INSERT ON REQUESTS
FOR EACH ROW
BEGIN
  IF :NEW.REQUESTID IS NULL THEN
    SELECT REQUESTID_SEQ.NEXTVAL INTO :NEW.REQUESTID FROM DUAL;
  END IF;
END;
/
