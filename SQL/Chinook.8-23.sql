CREATE VIEW tracklist AS
SELECT * FROM TRACK WHERE LOWER(NAME) LIKE '% for %';

SELECT * FROM TRACKLIST;

CREATE VIEW albumlist AS
SELECT * FROM ALBUM WHERE ALBUMID BETWEEN 250 AND 350;

SELECT * FROM ALBUMLIST;

SELECT t.NAME as trackname, a.TITLE as "Album Title" 
FROM TRACKLIST t INNER JOIN ALBUMLIST a
ON t.ALBUMID = a.ALBUMID;

SELECT t.NAME as trackname, a.TITLE as "Album Title" 
FROM TRACKLIST t FULL OUTER JOIN ALBUMLIST a
ON t.ALBUMID = a.ALBUMID;

SELECT t.NAME as trackname, a.TITLE as "Album Title" 
FROM TRACKLIST t FULL OUTER JOIN ALBUMLIST a
ON t.ALBUMID = a.ALBUMID
WHERE t.ALBUMID IS NULL OR a.ALBUMID IS NULL;

SELECT t.NAME as trackname, a.TITLE as "Album Title" 
FROM TRACKLIST t RIGHT OUTER JOIN ALBUMLIST a
ON t.ALBUMID = a.ALBUMID;

SELECT t.NAME as trackname, a.TITLE as "Album Title" 
FROM TRACKLIST t LEFT OUTER JOIN ALBUMLIST a
ON t.ALBUMID = a.ALBUMID;

SELECT tr.NAME as trackname, al.TITLE as "Album Title", ar.ARTISTID 
FROM TRACK tr 
INNER JOIN ALBUM al
ON tr.ALBUMID = al.ALBUMID
INNER JOIN ARTIST ar 
ON ar.ARTISTID = al.ARTISTID;

SELECT PLAYLIST.PLAYLISTID, PLAYLISTTRACK.PLAYLISTID AS PLAYLISTRACKID, MEDIATYPE.MEDIATYPEID,
GENRE.GENREID, INVOICELINE.INVOICELINEID, INVOICE.INVOICEID, TRACK.TRACKID, 
CUSTOMER.CUSTOMERID, EMPLOYEE.EMPLOYEEID, ALBUM.TITLE, ARTIST.ARTISTID, EXAMPLE.FAV_SONG_ID 
FROM TRACK 
INNER JOIN ALBUM ON TRACK.ALBUMID = ALBUM.ALBUMID
INNER JOIN ARTIST ON ARTIST.ARTISTID = ALBUM.ARTISTID
INNER JOIN PLAYLISTTRACK ON PLAYLISTTRACK.TRACKID = TRACK.TRACKID
INNER JOIN PLAYLIST ON PLAYLIST.PLAYLISTID = PLAYLISTTRACK.PLAYLISTID
INNER JOIN MEDIATYPE ON MEDIATYPE.MEDIATYPEID = TRACK.MEDIATYPEID
INNER JOIN GENRE ON GENRE.GENREID = TRACK.GENREID
INNER JOIN INVOICELINE ON INVOICELINE.TRACKID = TRACK.TRACKID
INNER JOIN INVOICE ON INVOICE.INVOICEID = INVOICELINE.INVOICEID
INNER JOIN CUSTOMER ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID
INNER JOIN EMPLOYEE ON EMPLOYEE.EMPLOYEEID = CUSTOMER.SUPPORTREPID
INNER JOIN EXAMPLE ON EXAMPLE.FAV_SONG_ID = TRACK.TRACKID;


SELECT CUSTOMER.FIRSTNAME, EMPLOYEE.FIRSTNAME
FROM EMPLOYEE
JOIN CUSTOMER ON EMPLOYEE.STATE = CUSTOMER.STATE;

-- number of songs per playlist
/*
SELECT PLAYLIST.NAME, COUNT(TRACK.TRACKID) AS NUMOFSONGS
FROM TRACK
INNER JOIN PLAYLISTTRACK ON TRACK.TRACKID = PLAYLISTTRACK.TRACKID
INNER JOIN PLAYLIST ON PLAYLIST.PLAYLISTID = PLAYLISTTRACK.PLAYLISTID
GROUP BY PLAYLIST.NAME;
*/

SELECT PLAYLIST.NAME, COUNT(PLAYLISTTRACK.TRACKID) AS NUMOFSONGS
FROM PLAYLIST INNER JOIN PLAYLISTTRACK ON PLAYLIST.PLAYLISTID = PLAYLISTTRACK.PLAYLISTID
GROUP BY PLAYLIST.NAME;

CREATE INDEX TRACKNAME ON TRACK(NAME);
DROP INDEX TRACKNAME;

/*
ALTER TABLE ALBUM
FOREIGN KEY (ARTISTID)
    REFERENCES ARTIST(ARTISTID)
    ON DELETE CASCADE;
*/  

SELECT * FROM EXAMPLE;

INSERT INTO EXAMPLE(F_NAME, L_NAME, FAV_SONG_ID)
VALUES('Xenon','Davy',3);

CREATE OR REPLACE PROCEDURE ADD_PERSON(
F_NAME IN varchar2,
L_NAME IN varchar2,
FAV_SONG_ID IN NUMBER)
AS BEGIN
INSERT INTO EXAMPLE(F_NAME, L_NAME, FAV_SONG_ID)
VALUES(F_NAME,L_NAME,FAV_SONG_ID);
COMMIT;
END ADD_PERSON;
/

DECLARE
  F_NAME VARCHAR2(200);
  L_NAME VARCHAR2(200);
  FAV_SONG_ID 20;
BEGIN
  F_NAME := 'stored';
  L_NAME := 'procedure;
  FAV_SONG_ID := 20;

  ADD_PERSON(
    F_NAME => F_NAME,
    L_NAME => L_NAME,
    FAV_SONG_ID => FAV_SONG_ID
  );
--rollback; 
END;

/