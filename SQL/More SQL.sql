CREATE VIEW TRACKLIST AS
SELECT * FROM TRACK WHERE UPPER(NAME) LIKE '% FOR %';

SELECT * FROM TRACKLIST;

CREATE VIEW ALBUMLIST AS
SELECT * FROM ALBUM WHERE ALBUMID BETWEEN 250 AND 350;

SELECT * FROM ALBUMLIST;

SELECT TR.NAME, ALBUM.TITLE AS "Album Title" FROM TRACK TR
INNER JOIN ALBUM ON TR.ALBUMID = ALBUM.ALBUMID
ORDER BY ALBUM.TITLE;

SELECT TL.NAME, AL.TITLE FROM TRACKLIST TL
FULL OUTER JOIN ALBUMLIST AL ON TL.ALBUMID = AL.ALBUMID
WHERE TL.ALBUMID IS NULL
OR AL.ALBUMID IS NULL;

SELECT TL.NAME AS "Name", ART.NAME AS "Artist", AL.TITLE AS "Album" FROM TRACKLIST TL
INNER JOIN ALBUMLIST AL ON TL.ALBUMID = AL.ALBUMID
INNER JOIN ARTIST ART ON ART.ARTISTID = AL.ARTISTID
ORDER BY ART.NAME, AL.TITLE, TL.NAME;

SELECT TR.NAME AS "Track", AL.TITLE AS "Album", ART.NAME AS "Artist",
G.NAME AS "Genre", PL.NAME AS "Playlist", MT.NAME AS "Media Type",
IL.UNITPRICE AS "Price", CUST.LASTNAME AS "Customer Name",
EMP.LASTNAME AS "Employee Name"
FROM TRACK TR
INNER JOIN ALBUM AL ON TR.ALBUMID = AL.ALBUMID
INNER JOIN ARTIST ART ON ART.ARTISTID = AL.ARTISTID
INNER JOIN GENRE G ON G.GENREID = TR.GENREID
INNER JOIN PLAYLISTTRACK PLT ON PLT.TRACKID = TR.TRACKID
INNER JOIN PLAYLIST PL ON PLT.PLAYLISTID = PL.PLAYLISTID
INNER JOIN MEDIATYPE MT ON MT.MEDIATYPEID = TR.MEDIATYPEID
INNER JOIN INVOICELINE IL ON IL.TRACKID = TR.TRACKID
INNER JOIN INVOICE INV ON INV.INVOICEID = IL.INVOICEID
INNER JOIN CUSTOMER CUST ON CUST.CUSTOMERID = INV.CUSTOMERID
INNER JOIN EMPLOYEE EMP ON EMP.EMPLOYEEID = CUST.SUPPORTREPID
ORDER BY "Artist", "Album", "Track";

SELECT CUST.FIRSTNAME AS CUSTNAME, EMP.FIRSTNAME AS EMPNAME
FROM EMPLOYEE EMP
JOIN CUSTOMER CUST ON EMP.STATE = CUST.STATE;


SELECT * from example;

insert into example(firstname, lastname, fav_song_id)
values ('Test', 'Tester', 8);
/

create or replace procedure add_person(
  fn in varchar2,
  ln in varchar2,
  id in number) as
begin
  insert into example(firstname, lastname, fav_song_id)
  values (fn, ln, id);
  commit;
end;
/
