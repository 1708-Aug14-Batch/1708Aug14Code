-- HOMEWORK ASSIGNMENT PART 1 - WORKING WITH AN EXISTING DATABASE

------------------------ 1.0 SETTING UP ORACLE CHINOOK ------------------------
-- 2.1 SELECT
-- TASK: SELECT ALL RECORDS FROM THE EMPLOYEE TABLE
select * from Employee;
--TASK: SELECT ALL FROM THE EMPLOYEE TABLE WHERE LAST NAME IS KING
select * from Employee where lastname='King';
--TASK: SELECT ALL RECORDS FROM THE EMPLOYEE TABLE WHERE FIRST NAME IS ANDREW AND REPORTSTO IS NULL
select * from Employee where firstname='Andrew' and reportsto is null;

--2.2 ORDER BY
--TASK: SELECT ALL ALBUMS IN THE ALBUM TABLE AND SORT RESULT SET IN DESCENDING ORDER BY TITLE
select * from Album order by title;
select * from Customer order by city ASC;

--2.3 INSERT INTO
--TASK: INSERT TWO NEW RECORDS INTO GENRE TABLE
insert into Genre (genreid, name) values (26,'Techno');
insert into Genre (genreid, name) values (27,'KPOP');
select * from Genre order by name;
--TASK: INSERT TWO NEW RECORDS INTO EMPLOYEE TABLE
insert into Employee (employeeid,lastname,firstname,title,reportsto,birthdate,hiredate,address,city,state,country,postalcode,phone,fax,email)
values (9,'McCaffery','Gray','Human Resources',1,'06-OCT-78','05-JUN-05','4 Notastreet Ave','Cityville', 'AB', 'Canada','T4T 2N1', '+1 (666) 666-6666','+1 (666) 666-0000','mcgray@chinookcorp.com');
insert into Employee (employeeid,lastname,firstname,title,reportsto,birthdate,hiredate,address,city,state,country,postalcode,phone,fax,email)
values (10,'Ryvere','Winter','Human Resources',1,'21-DEC-75','05-JUN-05','4 Notastreet Ave','Cityville', 'AB', 'Canada','T4T 2N1', '+1 (666) 666-6666','+1 (666) 666-1111','rywinter@chinookcorp.com');
select * from employee;
--TASK: INSERT TWO NEW RECORDS INTO CUSTOMER TABLE
insert into Customer (customerid,firstname,lastname,company,address,city,state,country,postalcode,phone,fax,email,supportrepid)
values (60, 'Kell', 'Conley', 'Witchy Things LLC', '6 Grey Ave', 'Salem', 'MA', 'USA', '06541', '+1 (987) 666-1567','+1 (987) 522-1467', 'kcon@lol.com',1);
insert into Customer (customerid,firstname,lastname,company,address,city,state,country,postalcode,phone,fax,email,supportrepid)
values (61, 'Shay', 'Katchz', 'Witchy Things LLC', '13 Tabby St', 'Salem', 'MA', 'USA', '06541', '+1 (987) 156-3958','+1 (987) 614-4561', 'shaykat@lol.com',1);
select * from customer;


--2.4 UPDATE
--TASK: UPDATE AARON MITCHELL IN CUSTOMER TABLE TO ROBERT WALTER
UPDATE Customer
SET firstname='Robert', lastname='Walter'
WHERE firstname='Aaron' and lastname='Mitchell';
select * from customer order by firstname;
--TASK: UPDATE NAME OF ARTIST IN THE ARTIST TABLE "Creedence Clearwater Revival" to "CCR"
select * from artist order by name;
UPDATE Artist
SET name='CCR'
WHERE name='Creedence Clearwater Revival';

--2.5 LIKE
--TASK: SELECT ALL INVOICES WITH A BILLING ADDRESS LIKE "T%"
select * from Invoice where billingaddress like 'T%';

--2.6 BETWEEN
--TASK: SELECT ALL INVOICES THAT HAVE A TOTAL BETWEEN 15 AND 50
select * from invoice where total between 15 and 50;
--TASK: SELECT ALL EMPLOYEES HIRED BETWEEN 1ST OF JUNE 2003 AND 1ST OF MARCH 2004
select * from Employee where hiredate between '1-JUN-03' and '1-MAR-04';

--2.7 DELETE
--TASK: DELETE A RECORD IN CUSTOMER TABLE WHERE THE NAME IS ROBERT WALTER (THERE MAY BE CONSTRAINTS THAT RELY ON THIS, FIND OUT HOW TO RESOLVE THEM)
select * from customer order by firstname;
select * from employee;
ALTER TABLE Invoice
disable constraint
FK_INVOICECUSTOMERID;
delete from customer
where firstname='Robert' and lastname='Walter';


------------------------ 3.0 FUNCTIONS 6 ------------------------
--3.1 SYSTEM DEFINED FUNCTIONS
--TASK: CREATE A FUNCTION THAT RETURNS THE CURRENT TIME
CREATE OR REPLACE FUNCTION getTime
  RETURN VARCHAR2
IS
  TYME VARCHAR2(50);
BEGIN
  SELECT TO_CHAR(SYSDATE,'hh24:mi:ss') into tyme from dual;
  RETURN tyme;
END;
/
select getTime from dual;
--TASK: CREATE A FUNCTION THAT RETURNS THE LENGTH OF A MEDIATYPE FROM THE MEDIATYPE TABLE
create or replace FUNCTION lenMedia (MEDTYPE NUMBER)
  RETURN NUMBER
IS
  LEN NUMBER;
BEGIN
  SELECT COUNT(*) INTO LEN FROM TRACK WHERE TRACK.MEDIATYPEID = MEDTYPE;
  RETURN LEN;
END;
/
SELECT * FROM TRACK;
select lenMedia(1) FROM DUAL;

--3.2 SYSTEM DEFINED AGGREGATE FUNCTIONS
--TASK: CREATE A FUNCTION THAT RETURNS THE AVERAGE TOTAL OF ALL INVOICES
CREATE  OR REPLACE FUNCTION AVGTOTALINV
  RETURN NUMBER
IS
  ATI NUMBER;
BEGIN
  SELECT AVG(INVOICE.TOTAL) INTO ATI FROM INVOICE;
  RETURN ATI;
END;
/
SELECT AVGTOTALINV FROM DUAL;
--TASK: CREATE A FUNCTION THAT RETURNS THE MOST EXPENSIVE TRACK
CREATE OR REPLACE FUNCTION MOSTEXPENSIVE

  RETURN NUMBER
IS
  MET NUMBER;
  MAXPRICE NUMBER;

BEGIN
  SELECT MAX(UNITPRICE) INTO MAXPRICE FROM TRACK;
  SELECT MIN(TRACKID) INTO MET FROM TRACK WHERE TRACK.UNITPRICE = MAXPRICE;
  RETURN MET;
END;
/
SELECT MOSTEXPENSIVE FROM DUAL;
--3.3 USER DEFINED SCALAR FUNCTIONS
--TASK: CREATE A FUNCTION THAT RETURNS THE AVERAGE PRICE OF INVOICELINE ITEMS IN THE INVOICELINE TABLE
create or replace FUNCTION AVINVLINE
  RETURN NUMBER
IS
  AVERAGE NUMBER;
BEGIN
  SELECT AVG(UNITPRICE) INTO AVERAGE FROM INVOICELINE;
  RETURN AVERAGE;
END;
/
SELECT AVINVLINE FROM DUAL;

--3.4 USER DEFFINED TABLE VALUED FUNCTIONS
--TASK: CREATE A FUNCTION THAT RETURNS ALL EMPLOYEES WHO ARE BORN AFTER 1968
CREATE OR REPLACE FUNCTION YOUNGINS
  RETURN VARCHAR2
IS
  AYOUNG VARCHAR2(50);
  CURSOR C1
  IS
    SELECT FIRSTNAME||' '||LASTNAME FROM EMPLOYEE WHERE BIRTHDATE>'31-DEC-68';
BEGIN
  OPEN C1;
  FETCH C1 INTO AYOUNG;
  IF C1%NOTFOUND THEN
    AYOUNG := -1;
  END IF;
CLOSE C1;
RETURN AYOUNG;
END;
/
SELECT * FROM EMPLOYEE;
SELECT YOUNGINS FROM DUAL;



------------------------ 4.0 STORED PROCEDURES 4 ------------------------
--4.1 BASIC STORED PROCEDURE
--TASK: CREATE A STORED PROCEDURE THAT SELECTS THE FIRST AND LAST NAMES OF ALL THE EMPLOYEES


--4.2 STORED PROCEDURE INPUT PARAMETERS
--TASK: CREATE A STORED PROCEDURE THAT UPDATES THE PERSONAL INFORMATION OF AN EMPLOYEE

--TASK: CREATE A STORED ROCEDURE THAT RETURNS THE MANAGERS OF AN EMPLOYEE


--4.3 STORED PROCEDURE OUTPUT PARAMETERS
--TASK: CREATE A STORED PROCEDURE THAT RETURNS THE NAME AND COMPANY OF A CUSTOMER



------------------------ 5.0 TRANSACTIONS 2 ------------------------
--TASK: CREATE A TRANSACTION THAT WILL GIVEN A INVOICEID WILL DELETE THAT INVOICE
--(THERE MAY BE SOME CONSTRAINTS THAT RELY ON THIS, FIND OUT HOW TO RESOLVE THEM).

--TASK: CREATE A TRANSACTION NESTED WITHIN A STORED PROCEDURE THAT INSERTS A NEW RECORD IN THE CUSTOMER TABLE



------------------------ 6.0 TRIGGERS ------------------------
--6.1 AFTER/FOR 3
--TASK: CREATE AN AFTER INSERT TRIGGER ON THE EMPLOYEE TABLE FIRED AFTER A NEW RECORD IS INSERTED INTO THE TABLE

--TASK: CREATE AN UPDATE TRIGGER ON THE ALBUM TABLE THAT FIRES AFTER A ROW IS INSERTED IN THE TABLE

--TASK: CREATE AN AFTER DELETE TRIGGER ON THE CUSTOMER TABLE THAT FIRES AFTER A ROW IS DELETED FROM THE TABLE




------------------------ 7.0 JOINS 5 ------------------------
--7.1 INNER
--TASK: CREATE AN INNER JOIN THAT JOINS CUSTOMERS AND ORDERS AND SPECIFIES THE NAME OF THE CUSTOMER AND THE INVOICEID


--7.2 OUTER
--TASK: CREATE AN OUTER JOIN THAT JOINS THE CUSTOMER AND INVOICE TABLE, SPECIFYING THE CUSTOMERID,FIRSTNAME,LASTNAME,INVOICEID,AND TOTAL.


--7.3 RIGHT
--TASK: CREATE A RIGHT JOIN THAT JOINS ALBUM AND ARTIST SPECIFYING THE ARTIST NAME AND TITLE


--7.4 CROSS
--TASK: CREATE A CROSS JOIN THAT JOINS ALBUM AND ARTIST AND SORTS BY ARTIST NAME IN ASCENDING ORDER.


--7.5 SELF
-- TASK: PERFORM A SELF-JOIN ON THE EMPLOYEE TABLE, JOINING ON THE REPORTSTO COLUMN.