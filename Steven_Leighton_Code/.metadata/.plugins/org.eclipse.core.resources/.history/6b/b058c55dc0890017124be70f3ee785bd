package com.bank.dao;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import com.bank.pojo.Account;
import com.bank.pojo.User;
import com.bank.util.ConnectionFactory;

public class DBDAO implements DAO {

	@Override
	public int addUser(User user) {
		int id = -1;

		try(Connection conn = ConnectionFactory.getInstance().getConnection();){

			conn.setAutoCommit(false);
			String sql = "insert into users (firstname, lastname, username, pwd) values (?,?,?,?)";

			//to get back primary key
			String[] key = new String[1];
			key[0] = "userid";

			//setup prepared with sql and allocate space for key
			PreparedStatement ps = conn.prepareStatement(sql,key);
			//set values into sql string ?'s
			ps.setString(1, user.getFirstname());
			ps.setString(2, user.getLastname());
			ps.setString(3, user.getUsername());
			ps.setString(4, user.getPassword());

			//execute and get values
			int numRowsAdded = ps.executeUpdate();

			//results from keys
			ResultSet primaryKeys = ps.getGeneratedKeys();
			while(primaryKeys.next()){
				id = primaryKeys.getInt(1);
			}
			conn.commit();

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return id;

	}

	@Override
	public User getUser(String usr, String pwd) {
		User user = new User();

		try(Connection conn = ConnectionFactory.getInstance().getConnection();){

			conn.setAutoCommit(false);
			String sql = "select * from users where"
					+ " username = ? AND "
					+ " pwd = ?";

			//setup prepared with sql and allocate space for key
			PreparedStatement ps = conn.prepareStatement(sql);
			//set values into sql string ?'s
			ps.setString(1, usr);
			ps.setString(2, pwd);

			
			//execute and get values
			ResultSet rs = ps.executeQuery();
			
			while(rs.next()){
				user = new User(rs.getInt("userId"),rs.getString("firstname"),rs.getString("lastname"),
						rs.getString("username"),rs.getString("pwd"));
			}
			conn.commit();

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return user;
	}

	@Override
	public void updateUser(User user) {
		
		try(Connection conn = ConnectionFactory.getInstance().getConnection();){

			String sql = "{ call updateUser(?,?,?,?) }";
			
			
			CallableStatement cs = conn.prepareCall(sql);
			//set second ? to findPerson for variable name
			cs.setString(1, user.getFirstname());
			cs.setString(2, user.getLastname());
			cs.setString(3, user.getPassword());
			cs.setInt(4, user.getId());
			//execute
			cs.execute();
			
//			System.out.println(sql);
//			//setup prepared with sql and allocate space for key
//			PreparedStatement ps = conn.prepareStatement(sql);
//			//set values into sql string ?'s
//			ps.setString(1, user.getFirstname());
//			ps.setString(2, user.getLastname());
//			ps.setString(3, user.getPassword());
//			ps.setInt(4, user.getId());
//
//			System.out.println("Executing..");
//			//execute and get values
//			ps.executeQuery();
//			System.out.println("Finished");
			

		} catch (SQLException e) {
			e.printStackTrace();
		}


	}

	@Override
	public void deleteUser(User user) {
		// TODO Auto-generated method stub

	}

	@Override
	public Account addAccount(int userID, int typeID) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Account getAccount(int accountID) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void updateAccount(Account account) {
		// TODO Auto-generated method stub

	}

	@Override
	public void deleteAccount(Account account) {
		// TODO Auto-generated method stub

	}

}
