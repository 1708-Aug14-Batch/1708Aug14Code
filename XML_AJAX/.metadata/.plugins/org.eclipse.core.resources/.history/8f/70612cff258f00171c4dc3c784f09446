package com.ex.parserxml;

import java.io.File;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class DomParser {
	/*
	 * This file will read an XML file via DOM XML parser. The DOM parser will
	 * parse the entire XML document and load it into memory. Then it will model
	 * a tree-structure for easy traversal/manipulation of the stored data
	 * 
	 * WARNING: The DOM parser is slow and consumes a lot of memory when it
	 * loads a large XML doc
	 */

	public static void main(String[] args) {

		try {

			File revXML = new File(
					"C:/Users/Surplus/my_git_repos/1708Aug14Code/XML_AJAX/FridayExamples/src/main/resources/xml/revature.xml");
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = dbFactory.newDocumentBuilder();
			Document doc = builder.parse(revXML);

			// optional but recommended step
			doc.getDocumentElement().normalize();

			String root = doc.getDocumentElement().getNodeName();
			if (root == null) {
				System.out.println("Error: root node not found");
				return;
			}
			System.out.println("Root element: " + root);

			NodeList nodes = doc.getElementsByTagName("employee");

			for (int i = 0; i < nodes.getLength(); i++) {
				Node curr = nodes.item(i);
				
				System.out.println("Current element: " + curr.getNodeName());
				
				if (curr.getNodeType() == Node.ELEMENT_NODE) {
					Element element = (Element) curr;
					
					System.out.println("\tAttribute: " + element.getAttribute("id"));
					
				}
				
			}

		} catch (ParserConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}
